{"version":3,"sources":["Components/Shopcart.js","utility.js","App.js","serviceWorker.js","index.js"],"names":["Shopcart","props","react_default","a","createElement","shopCart","map","shopObj","key","Uid","Name","Qty","Date","type","name","onChange","toDoDone","bind","checked","Done","onClick","deleteToDo","getCurrentDateWithTime","returnInLine","arguments","length","undefined","newDate","date","getDate","dateDisp","month","getMonth","monthDisp","year","getFullYear","hour","getHours","hourDisp","minutes","getMinutes","minutesDisp","seconds","getSeconds","secondsDisp","App","state","addToList","qty","shopArray","_this","uidv4","require","shopObject","Utility","push","document","getElementById","value","setState","uid","filter","changed","find","_this2","this","id","Components_Shopcart","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1e16d725.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Shopcart = props => (\r\n  <div>\r\n    <ul>\r\n      {props.shopCart.map(shopObj => (\r\n        <li key={shopObj.Uid}>\r\n          <div>\r\n            {shopObj.Name} - {shopObj.Qty} - {shopObj.Date} -{\" \"}\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"checkDone\"\r\n              onChange={props.toDoDone.bind(props, shopObj.Uid)}\r\n              checked={shopObj.Done}\r\n            />\r\n            <button onClick={props.deleteToDo.bind(props, shopObj.Uid)}>\r\n              Usu≈Ñ\r\n            </button>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default Shopcart;\r\n","export const getCurrentDate = () => {\r\n  let newDate = new Date();\r\n  let date = newDate.getDate();\r\n  const dateDisp = date < 10 ? \"0\" + date : date;\r\n  let month = newDate.getMonth() + 1;\r\n  const monthDisp = month < 10 ? \"0\" + month : month;\r\n  let year = newDate.getFullYear();\r\n\r\n  return year + \"-\" + monthDisp + \"-\" + dateDisp;\r\n};\r\nexport const getCurrentDateWithTime = (returnInLine = false) => {\r\n  let newDate = new Date();\r\n  let date = newDate.getDate();\r\n  const dateDisp = date < 10 ? \"0\" + date : date;\r\n  let month = newDate.getMonth() + 1;\r\n  const monthDisp = month < 10 ? \"0\" + month : month;\r\n  let year = newDate.getFullYear();\r\n  let hour = newDate.getHours();\r\n  const hourDisp = hour < 10 ? \"0\" + hour : hour;\r\n  let minutes = newDate.getMinutes();\r\n  const minutesDisp = minutes < 10 ? \"0\" + minutes : minutes;\r\n  let seconds = newDate.getSeconds();\r\n  const secondsDisp = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n  if (!returnInLine) {\r\n    return (\r\n      year +\r\n      \"-\" +\r\n      monthDisp +\r\n      \"-\" +\r\n      dateDisp +\r\n      \" \" +\r\n      hourDisp +\r\n      \":\" +\r\n      minutesDisp +\r\n      \":\" +\r\n      secondsDisp\r\n    );\r\n  } else {\r\n    return (\r\n      year +\r\n      \"-\" +\r\n      monthDisp +\r\n      \"-\" +\r\n      dateDisp +\r\n      \"T\" +\r\n      hourDisp +\r\n      \":\" +\r\n      minutesDisp +\r\n      \":\" +\r\n      secondsDisp\r\n    );\r\n  }\r\n};\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport ShopCart from \"./Components/Shopcart\";\nimport * as Utility from \"./utility\";\n\nclass App extends Component {\n  state = {\n    shopCart: []\n  };\n\n  addToList = (name, qty) => {\n    if (name.length !== 0 && qty.length !== 0) {\n      let shopArray = this.state.shopCart;\n      const uidv4 = require(\"uuid/v4\");\n      const shopObject = {};\n      shopObject.Uid = uidv4();\n      shopObject.Name = name;\n      shopObject.Qty = qty;\n      shopObject.Date = Utility.getCurrentDateWithTime();\n      shopObject.Done = false;\n      shopArray.push(shopObject);\n      document.getElementById(\"name\").value = \"\";\n      document.getElementById(\"qty\").value = \"\";\n      this.setState({\n        shopCart: shopArray\n      });\n    }\n  };\n\n  deleteToDo = uid => {\n    let shopArray = this.state.shopCart;\n    shopArray = shopArray.filter(shopObject => shopObject.Uid !== uid);\n    this.setState({\n      shopCart: shopArray\n    });\n  };\n\n  toDoDone = uid => {\n    let shopArray = this.state.shopCart;\n    const changed = shopArray.find(shopObject => shopObject.Uid === uid);\n    changed.Done = !changed.Done;\n    this.setState({\n      shopCart: shopArray\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input id=\"name\" />\n          <br />\n          <input type=\"number\" id=\"qty\" />\n          <br />\n          <button\n            onClick={() =>\n              this.addToList(\n                document.getElementById(\"name\").value,\n                document.getElementById(\"qty\").value\n              )\n            }\n          >\n            Dodaj do listy\n          </button>\n        </div>\n        <ShopCart\n          shopCart={this.state.shopCart}\n          deleteToDo={this.deleteToDo}\n          toDoDone={this.toDoDone}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}